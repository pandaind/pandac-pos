{
  "info": {
    "_postman_id": "pandac-pos-api-collection",
    "name": "Pandac POS API",
    "description": "Complete API collection for Pandac Point of Sale System",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique username (max 20 chars)",
                  "const randomNum = Math.floor(Math.random() * 100000);",
                  "const username = 'user' + randomNum;",
                  "pm.environment.set('test_username', username);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "    pm.expect(jsonData.username).to.eql(pm.environment.get('test_username'));",
                  "    // Save user ID for sales",
                  "    pm.environment.set('user_id', jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{test_username}}\",\n  \"password\": \"testpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has tokens\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData).to.have.property('refresh_token');",
                  "    pm.expect(jsonData.token_type).to.eql('bearer');",
                  "    ",
                  "    // Save tokens for subsequent requests",
                  "    pm.environment.set('access_token', jsonData.access_token);",
                  "    pm.environment.set('refresh_token', jsonData.refresh_token);",
                  "});",
                  "",
                  "// Decode JWT to get user_id",
                  "if (pm.response.json() && pm.response.json().access_token) {",
                  "    const token = pm.response.json().access_token;",
                  "    const payload = JSON.parse(atob(token.split(\".\")[1]));",
                  "    if (payload.sub) {",
                  "        pm.environment.set(\"user_id\", payload.sub);",
                  "        console.log(\"\u2713 Captured user_id from JWT:\", payload.sub);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{test_username}}\",\n  \"password\": \"testpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has new access token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.environment.set('access_token', jsonData.access_token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/auth/refresh",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "auth",
                "refresh"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/auth/logout",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "auth",
                "logout"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "List Products",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/products?skip=0&limit=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "products"
              ],
              "query": [
                {
                  "key": "skip",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Product",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 or 200\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has product data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.environment.set('product_id', jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product\",\n  \"description\": \"A test product for Newman testing\",\n  \"sku\": \"TEST-001\",\n  \"barcode\": \"1234567890\",\n  \"price\": 29.99,\n  \"cost\": 15.00,\n  \"category\": \"Electronics\",\n  \"stock_quantity\": 100,\n  \"reorder_level\": 10,\n  \"is_active\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/products",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "products"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has product details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/products/{{product_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "products",
                "{{product_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Product",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Product is updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.price).to.eql(34.99);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product Updated\",\n  \"description\": \"Updated description\",\n  \"price\": 34.99,\n  \"stock_quantity\": 150\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/products/{{product_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "products",
                "{{product_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/products/{{product_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "products",
                "{{product_id}}"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Customers",
      "item": [
        {
          "name": "List Customers",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/customers",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "customers"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Customer",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 or 200\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has customer data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.environment.set('customer_id', jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Customer\",\n  \"contact_info\": \"customer@example.com, +1234567890\",\n  \"loyalty_points\": 0\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/customers",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "customers"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Customer by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/customers/{{customer_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "customers",
                "{{customer_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Customer",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/customers/{{customer_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "customers",
                "{{customer_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"updated@example.com\",\n  \"phone\": \"+9999999999\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/customers/{{customer_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "customers",
                "{{customer_id}}"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Sales",
      "item": [
        {
          "name": "Create Sale Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Sale Test Product\",\n  \"description\": \"Product for sales testing\",\n  \"price\": 10.0,\n  \"cost\": 5.0,\n  \"stock_quantity\": 100,\n  \"category\": \"Test\",\n  \"barcode\": \"SALE123456\",\n  \"supplier\": \"Test Supplier\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/v1/products",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "products"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 or 200\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has product data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "    pm.expect(responseJson).to.have.property(\"id\");",
                  "});",
                  "",
                  "// Capture product_id for sale creation",
                  "if (pm.response.json() && pm.response.json().id) {",
                  "    pm.environment.set(\"product_id\", pm.response.json().id);",
                  "    console.log(\"\u2713 Captured product_id for sale:\", pm.response.json().id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Sale",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 or 200\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 201 || pm.response.code === 200) {",
                  "    try {",
                  "        const responseJson = pm.response.json();",
                  "        console.log(\"Create Sale Response:\", JSON.stringify(responseJson));",
                  "        ",
                  "        // Capture sale_id from the response",
                  "        if (responseJson.id) {",
                  "            pm.environment.set(\"sale_id\", responseJson.id);",
                  "            console.log(\"\u2705 Captured sale_id:\", responseJson.id);",
                  "        } else if (responseJson.sale_id) {",
                  "            pm.environment.set(\"sale_id\", responseJson.sale_id);",
                  "            console.log(\"\u2705 Captured sale_id:\", responseJson.sale_id);",
                  "        }",
                  "        ",
                  "        pm.test(\"Response has sale data\", function () {",
                  "            pm.expect(responseJson).to.have.property(\"id\");",
                  "        });",
                  "    } catch (e) {",
                  "        console.log(\"Error parsing response:\", e.message);",
                  "        console.log(\"Response text:\", pm.response.text());",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"cashier_id\": \"{{user_id}}\",\n  \"sale_date\": \"2024-01-01T10:00:00\",\n  \"subtotal\": 10.0,\n  \"tax_amount\": 1.0,\n  \"total_amount\": 11.0,\n  \"items\": [\n    {\n      \"product_id\": \"{{product_id}}\",\n      \"quantity\": 1,\n      \"unit_price\": 10.0,\n      \"subtotal\": 10.0\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/v1/sales/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "sales",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "List Sales",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/sales",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "sales"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Sale by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/sales/{{sale_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "sales",
                "{{sale_id}}"
              ]
            },
            "description": "NOTE: This test fails with 500 Internal Server Error - Backend bug"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Sale",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/sales/{{sale_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "sales",
                "{{sale_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"completed\",\n  \"notes\": \"Sale completed and paid\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "NOTE: This test fails with 500 Internal Server Error - Backend bug"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Sale",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/sales/{{sale_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "sales",
                "{{sale_id}}"
              ]
            },
            "description": "NOTE: This test fails with 500 Internal Server Error - Backend bug"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Add Sale Item",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/sales/{{sale_id}}/items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "sales",
                "{{sale_id}}",
                "items"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_id\": \"{{product_id}}\",\n  \"quantity\": 1,\n  \"unit_price\": 34.99,\n  \"subtotal\": 34.99,\n  \"discount_amount\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "NOTE: This test fails with 500 Internal Server Error - Backend bug"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Sale Items",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/sales/{{sale_id}}/items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "sales",
                "{{sale_id}}",
                "items"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Add Sale Payment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/sales/{{sale_id}}/payments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "sales",
                "{{sale_id}}",
                "payments"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sale_id\": \"{{sale_id}}\",\n  \"payment_method\": \"cash\",\n  \"amount\": 76.98,\n  \"payment_date\": \"{{$isoTimestamp}}\",\n  \"status\": \"completed\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "NOTE: This test fails with 500 Internal Server Error - Backend bug"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Sale Payments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/sales/{{sale_id}}/payments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "sales",
                "{{sale_id}}",
                "payments"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Sales Revenue Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/sales/analytics/revenue?start_date=2024-01-01T00:00:00&end_date=2024-12-31T23:59:59",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "sales",
                "analytics",
                "revenue"
              ],
              "query": [
                {
                  "key": "start_date",
                  "value": "2024-01-01T00:00:00"
                },
                {
                  "key": "end_date",
                  "value": "2024-12-31T23:59:59"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Top Products Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/sales/analytics/top-products?start_date=2024-01-01T00:00:00&end_date=2024-12-31T23:59:59",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "sales",
                "analytics",
                "top-products"
              ],
              "query": [
                {
                  "key": "start_date",
                  "value": "2024-01-01T00:00:00"
                },
                {
                  "key": "end_date",
                  "value": "2024-12-31T23:59:59"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Daily Sales Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/sales/daily-summary/2024-01-01",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "sales",
                "daily-summary",
                "2024-01-01"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Inventory",
      "item": [
        {
          "name": "List Inventory",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/stock-levels/?low_stock_only=false",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "stock-levels",
                ""
              ],
              "query": [
                {
                  "key": "low_stock_only",
                  "value": "false"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "List Suppliers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/suppliers/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "suppliers"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Supplier",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/suppliers/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "suppliers",
                ""
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Supplier\",\n  \"contact_info\": \"John Doe - supplier@example.com - 555-1234\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set('supplier_id', jsonData.id);",
                  "    console.log('\u2713 Captured supplier_id:', jsonData.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Supplier",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/suppliers/{{supplier_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "suppliers",
                "{{supplier_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Supplier",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/suppliers/{{supplier_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "suppliers",
                "{{supplier_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Supplier\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Supplier",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/suppliers/{{supplier_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "suppliers",
                "{{supplier_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Search Suppliers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/suppliers/search?name=Test",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "suppliers",
                "search"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "Test"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "List Purchase Orders",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/purchase-orders/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "purchase-orders"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Purchase Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/purchase-orders/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "purchase-orders",
                ""
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"supplier_id\": \"{{supplier_id}}\",\n  \"product_list\": [\n    {\n      \"name\": \"Sample Product for PO\",\n      \"price\": 100.0,\n      \"description\": \"Test product for purchase order\",\n      \"category\": \"Test Category\"\n    }\n  ],\n  \"status\": \"Pending\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set('purchase_order_id', jsonData.id);",
                  "    console.log('\u2713 Captured purchase_order_id:', jsonData.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Purchase Order",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/purchase-orders/{{purchase_order_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "purchase-orders",
                "{{purchase_order_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Purchase Order",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/purchase-orders/{{purchase_order_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "purchase-orders",
                "{{purchase_order_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"COMPLETED\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Purchase Order",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/purchase-orders/{{purchase_order_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "purchase-orders",
                "{{purchase_order_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Order Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/purchase-orders/{{purchase_order_id}}/status",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "purchase-orders",
                "{{purchase_order_id}}",
                "status"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"RECEIVED\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Pending Purchase Orders",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/purchase-orders/pending/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "purchase-orders",
                "pending"
              ],
              "query": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Restock Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/restock/{{product_id}}?quantity=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "restock",
                "{{product_id}}"
              ],
              "query": [
                {
                  "key": "quantity",
                  "value": "10"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 50\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "NOTE: This test fails with 500 Internal Server Error - Backend bug"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Stock Adjustment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/stock-adjustment/{{product_id}}?adjustment=-5&reason=damaged",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "stock-adjustment",
                "{{product_id}}"
              ],
              "query": [
                {
                  "key": "adjustment",
                  "value": "-5"
                },
                {
                  "key": "reason",
                  "value": "damaged"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"adjustment\": -5,\n  \"reason\": \"Damaged goods\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Order Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated status\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"completed\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/v1/inventory/purchase-orders/{{purchase_order_id}}/status",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "purchase-orders",
                "{{purchase_order_id}}",
                "status"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Reports",
      "item": [
        {
          "name": "General Sales Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has sales report data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/reports/sales?start_date=2024-01-01&end_date=2024-12-31",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "reports",
                "sales"
              ],
              "query": [
                {
                  "key": "start_date",
                  "value": "2024-01-01"
                },
                {
                  "key": "end_date",
                  "value": "2024-12-31"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Sales Report",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has report data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/reports/sales/daily?date={{$isoTimestamp}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "reports",
                "sales",
                "daily"
              ],
              "query": [
                {
                  "key": "date",
                  "value": "{{$isoTimestamp}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Period Sales Report",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/reports/sales/period?start_date=2024-01-01T00:00:00&end_date=2024-12-31T23:59:59",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "reports",
                "sales",
                "period"
              ],
              "query": [
                {
                  "key": "start_date",
                  "value": "2024-01-01T00:00:00"
                },
                {
                  "key": "end_date",
                  "value": "2024-12-31T23:59:59"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Inventory Stock Levels",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/reports/inventory/stock-levels",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "reports",
                "inventory",
                "stock-levels"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Customer Loyalty Report",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/reports/customers/loyalty",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "reports",
                "customers",
                "loyalty"
              ]
            },
            "description": "NOTE: This test fails with 500 Internal Server Error - Backend bug"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Financial Profit/Loss",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/reports/financial/profit-loss?start_date=2024-01-01T00:00:00&end_date=2024-12-31T23:59:59",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "reports",
                "financial",
                "profit-loss"
              ],
              "query": [
                {
                  "key": "start_date",
                  "value": "2024-01-01T00:00:00"
                },
                {
                  "key": "end_date",
                  "value": "2024-12-31T23:59:59"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "List Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "users"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "users"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"newuser\",\n  \"email\": \"newuser@example.com\",\n  \"full_name\": \"New User\",\n  \"password\": \"password123\",\n  \"role_id\": \"{{role_id}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "        pm.environment.set('user_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/users/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "users",
                "{{user_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/users/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "users",
                "{{user_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"full_name\": \"Updated User\",\n  \"email\": \"updated@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/users/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "users",
                "{{user_id}}"
              ]
            },
            "description": "NOTE: This test fails with 500 Internal Server Error - Backend bug"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Roles",
      "item": [
        {
          "name": "List Roles",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/roles",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "roles"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData && jsonData.length > 0) {",
                  "        pm.environment.set('role_id', jsonData[0].id);",
                  "        console.log('\u2713 Captured role_id:', jsonData[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Role",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/roles",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "roles"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Manager\",\n  \"description\": \"Store Manager Role\",\n  \"permissions\": [\n    \"read\",\n    \"write\",\n    \"update\"\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "        pm.environment.set('role_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Role",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/roles/{{role_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "roles",
                "{{role_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Role",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/roles/{{role_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "roles",
                "{{role_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Senior Manager\",\n  \"description\": \"Updated description\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Role",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/roles/{{role_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "roles",
                "{{role_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Employees",
      "item": [
        {
          "name": "List Employees",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/employees",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "employees"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Employee",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/employees/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "employees",
                "{{last_created_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Employee Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/employees/{{last_created_id}}/transactions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "employees",
                "{{last_created_id}}",
                "transactions"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Employee",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/employees",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "employees"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user_id\": 1,\n  \"employee_code\": \"EMP001\",\n  \"position\": \"Cashier\",\n  \"hire_date\": \"2024-01-01\",\n  \"salary\": 30000.0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "        pm.environment.set('employee_id', jsonData.id);",
                  "    }",
                  "});",
                  "",
                  "// Capture employee_id for subsequent requests",
                  "if (pm.response.json() && pm.response.json().id) {",
                  "    pm.globals.set(\"employee_id\", pm.response.json().id);",
                  "    console.log(\"\u2713 Captured employee_id:\", pm.response.json().id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Employee",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/employees/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "employees",
                "{{last_created_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"position\": \"Senior Cashier\",\n  \"salary\": 35000.0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Employee",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/employees/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "employees",
                "{{last_created_id}}"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Transactions",
      "item": [
        {
          "name": "List Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/transactions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "transactions"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Transaction",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/transactions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "transactions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"employee_id\": 1,\n  \"sale_id\": 1,\n  \"payment_id\": 1,\n  \"transaction_type\": \"SALE\",\n  \"amount\": 100.0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "        pm.environment.set('transaction_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Transaction",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/transactions/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "transactions",
                "{{last_created_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Transaction",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/transactions/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "transactions",
                "{{last_created_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 150.0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Transaction",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/transactions/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "transactions",
                "{{last_created_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Transaction Employee",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/transactions/{{last_created_id}}/employee",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "transactions",
                "{{last_created_id}}",
                "employee"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Transaction Sale",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/transactions/{{last_created_id}}/sale",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "transactions",
                "{{last_created_id}}",
                "sale"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Transaction Payment",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/transactions/{{last_created_id}}/payment",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "transactions",
                "{{last_created_id}}",
                "payment"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Payments",
      "item": [
        {
          "name": "List Payments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/payments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "payments"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Payment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/payments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "payments"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sale_id\": 1,\n  \"amount\": 100.0,\n  \"payment_method\": \"CASH\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "        pm.environment.set('payment_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Payment",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/payments/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "payments",
                "{{last_created_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Payment",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/payments/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "payments",
                "{{last_created_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 120.0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Payment",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/payments/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "payments",
                "{{last_created_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Suppliers",
      "item": [
        {
          "name": "List Suppliers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/suppliers",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "suppliers"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Supplier",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/suppliers/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "suppliers",
                ""
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Supplier\",\n  \"contact_info\": \"John Doe - supplier@example.com - 555-1234\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set('supplier_id', jsonData.id);",
                  "    console.log('\u2713 Captured supplier_id:', jsonData.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Supplier",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/suppliers/{{supplier_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "suppliers",
                "{{supplier_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Supplier",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/suppliers/{{supplier_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "suppliers",
                "{{supplier_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contact_person\": \"Jane Doe\",\n  \"phone\": \"+0987654321\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Supplier",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/suppliers/{{supplier_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "suppliers",
                "{{supplier_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Purchase Orders",
      "item": [
        {
          "name": "List Purchase Orders",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/purchase-orders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "purchase-orders"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Purchase Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/purchase-orders/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "purchase-orders",
                ""
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"supplier_id\": \"{{supplier_id}}\",\n  \"product_list\": [\n    {\n      \"name\": \"Sample Product for PO\",\n      \"price\": 100.0,\n      \"description\": \"Test product for purchase order\",\n      \"category\": \"Test Category\"\n    }\n  ],\n  \"status\": \"Pending\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set('purchase_order_id', jsonData.id);",
                  "    console.log('\u2713 Captured purchase_order_id:', jsonData.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Purchase Order",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/purchase-orders/{{purchase_order_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "purchase-orders",
                "{{purchase_order_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Purchase Order",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/purchase-orders/{{purchase_order_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "purchase-orders",
                "{{purchase_order_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"RECEIVED\",\n  \"total_amount\": 5500.0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Purchase Order",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/inventory/purchase-orders/{{purchase_order_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "inventory",
                "purchase-orders",
                "{{purchase_order_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Discounts",
      "item": [
        {
          "name": "List Discounts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/discounts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "discounts"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Discount",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/discounts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "discounts"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Summer Sale\",\n  \"code\": \"SUMMER2024\",\n  \"type\": \"PERCENTAGE\",\n  \"value\": 15.0,\n  \"start_date\": \"2024-06-01\",\n  \"end_date\": \"2024-08-31\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "        pm.environment.set('discount_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Discount",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/discounts/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "discounts",
                "{{last_created_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Discount",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/discounts/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "discounts",
                "{{last_created_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"value\": 20.0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Discount",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/discounts/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "discounts",
                "{{last_created_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Loyalty Programs",
      "item": [
        {
          "name": "List Loyalty Programs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/loyalty-programs",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "loyalty-programs"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Loyalty Program",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/loyalty-programs",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "loyalty-programs"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Gold Member\",\n  \"points_per_dollar\": 10,\n  \"minimum_purchase\": 100.0,\n  \"benefits\": \"10% discount + birthday bonus\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "        pm.environment.set('loyalty_program_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Loyalty Program",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/loyalty-programs/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "loyalty-programs",
                "{{last_created_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Loyalty Program",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/loyalty-programs/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "loyalty-programs",
                "{{last_created_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"points_per_dollar\": 15\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Loyalty Program",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/loyalty-programs/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "loyalty-programs",
                "{{last_created_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Notifications",
      "item": [
        {
          "name": "List Notifications",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/notifications",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "notifications"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Notification",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/notifications",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "notifications"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user_id\": 1,\n  \"title\": \"System Update\",\n  \"message\": \"System will be under maintenance tonight\",\n  \"type\": \"INFO\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "        pm.environment.set('notification_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Settings",
      "item": [
        {
          "name": "List Settings",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/settings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "settings"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Setting",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/settings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "settings"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"key\": \"tax_rate\",\n  \"value\": \"0.08\",\n  \"category\": \"SALES\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('last_created_id', jsonData.id);",
                  "        pm.environment.set('setting_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Setting",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/settings/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "settings",
                "{{last_created_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Setting",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/settings/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "settings",
                "{{last_created_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"value\": \"0.10\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Update successful\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Setting",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/settings/{{last_created_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "settings",
                "{{last_created_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verify we have an access token",
                  "const token = pm.environment.get('access_token');",
                  "if (!token) {",
                  "    console.log('\u26a0\ufe0f  No access token found. Run Authentication tests first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "System",
      "item": [
        {
          "name": "Root Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                ""
              ]
            }
          }
        },
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has health status\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Suppliers V2",
      "item": [
        {
          "name": "List Suppliers V2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"array\");",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/suppliers/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "suppliers",
                ""
              ]
            }
          }
        },
        {
          "name": "Create Supplier V2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has supplier data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "});",
                  "",
                  "if (pm.response.json().id) {",
                  "    pm.globals.set(\"supplier_v2_id\", pm.response.json().id);",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Supplier V2\",\n  \"contact_person\": \"Jane Doe\",\n  \"email\": \"jane@testsupplier.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"123 Supplier St\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/v1/suppliers/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "suppliers",
                ""
              ]
            }
          }
        },
        {
          "name": "Get Supplier V2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has supplier details\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "    pm.expect(responseJson).to.have.property(\"id\");",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/suppliers/{{supplier_v2_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "suppliers",
                "{{supplier_v2_id}}"
              ]
            }
          }
        },
        {
          "name": "Update Supplier V2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Supplier V2\",\n  \"contact_person\": \"Jane Smith\",\n  \"email\": \"jane.smith@testsupplier.com\",\n  \"phone\": \"+1234567890\",\n  \"address\": \"456 Updated St\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/v1/suppliers/{{supplier_v2_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "suppliers",
                "{{supplier_v2_id}}"
              ]
            }
          }
        },
        {
          "name": "Delete Supplier V2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/suppliers/{{supplier_v2_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "suppliers",
                "{{supplier_v2_id}}"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Purchase Orders V2",
      "item": [
        {
          "name": "List Purchase Orders V2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"array\");",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/purchase-orders/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "purchase-orders",
                ""
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            }
          }
        },
        {
          "name": "Create Purchase Order V2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response has purchase order data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "});",
                  "",
                  "if (pm.response.json().id) {",
                  "    pm.globals.set(\"purchase_order_v2_id\", pm.response.json().id);",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"supplier_id\": \"{{supplier_id}}\",\n  \"expected_delivery_date\": \"2024-12-31\",\n  \"status\": \"pending\",\n  \"total_amount\": 1000.00\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/v1/purchase-orders/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "purchase-orders",
                ""
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            }
          }
        },
        {
          "name": "Get Purchase Order V2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has purchase order details\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "    pm.expect(responseJson).to.have.property(\"id\");",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/purchase-orders/{{purchase_order_v2_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "purchase-orders",
                "{{purchase_order_v2_id}}"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            }
          }
        },
        {
          "name": "Update Purchase Order V2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"supplier_id\": \"{{supplier_id}}\",\n  \"expected_delivery_date\": \"2024-12-31\",\n  \"status\": \"approved\",\n  \"total_amount\": 1200.00\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/v1/purchase-orders/{{purchase_order_v2_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "purchase-orders",
                "{{purchase_order_v2_id}}"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            }
          }
        },
        {
          "name": "Delete Purchase Order V2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/purchase-orders/{{purchase_order_v2_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "v1",
                "purchase-orders",
                "{{purchase_order_v2_id}}"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    }
  ]
}